#############################Абстрактный класс##########################
  Пример применения абстрактного класса можно посмотреть на создании кода, где класс ДОМ, который имеет абстрактный метод,
а виды домов ( косой, двух-этажный, вилла ) - это классы, которые наследуются от абстрактного класса.
Добавляет свойства и методы, отражающие особенности двух-этажных домов.
А) Например, это может быть наличие второго этажа, отдельные спальни для каждого этажа.
Б) Класс "Косой дом" также наследуется от класса "ДОМ" и представляет особый тип домов, построенных под углом.
Он может иметь необычную форму, нестандартное расположение комнат и специфичные характеристики.
В) Каждый класс-наследник может иметь свои собственные свойства и методы, а также использовать унаследованные от класса "ДОМ" свойства и методы. 
Например, каждый дом будет иметь свою собственную площадь и цену, но методы для расчета общей стоимости дома могут быть унаследованы от класса "ДОМ".
В данной иерархии классов класс "ДОМ" является абстрактным, так как он не позволяет создавать экземпляры этого класса напрямую, а только использовать его в качестве базового для других классов.


#############################Множественное наследования##########################
Одним из примеров множественного наследования может служить разработка программы,
которая моделирует зоопарк с различными видами животных. 
Предположим, у нас есть следующие классы:
class Animal:
    def __init__(self, name):
        self.name = name

    def eat(self):
        print(f"{self.name} is eating.")

class CanFly:
    def fly(self):
        print(f"{self.name} is flying.")

class CanSwim:
    def swim(self):
        print(f"{self.name} is swimming.")

class Bird(Animal, CanFly):
    def __init__(self, name):
        super().__init__(name)

class Fish(Animal, CanSwim):
    def __init__(self, name):
        super().__init__(name)

class Duck(Bird, CanSwim):
    def __init__(self, name):
        super().__init__(name)

1) - В этом примере у нас есть базовый класс Animal, который определяет общие атрибуты и методы для всех животных.
Затем у нас есть классы CanFly и CanSwim, которые определяют возможности полета и плавания соответственно.

2) - Классы Bird и Fish наследуются от класса Animal и добавляют возможность полета и плавания, соответственно, путем множественного наследования от классов CanFly и CanSwim.

3) - Класс Duck наследуется от классов Bird и CanSwim, чтобы добавить своего рода уточнение - утка является птицей, которая также может плавать.
